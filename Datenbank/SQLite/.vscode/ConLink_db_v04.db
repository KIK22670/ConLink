-- SQLite does not support SET statements, so we skip them

-- Create tables
CREATE TABLE IF NOT EXISTS a_aerzte (
    a_id INTEGER PRIMARY KEY NOT NULL,
    a_titel TEXT,
    a_vorname TEXT,
    a_nachname TEXT,
    a_email TEXT,
    a_telefonnummer TEXT,
    a_fachrichtung TEXT,
    a_plz TEXT,
    a_ort TEXT,
    a_berufserfahrung INTEGER,
    a_qualifikationen TEXT
);

CREATE TABLE IF NOT EXISTS p_patienten (
    p_id INTEGER PRIMARY KEY NOT NULL,
    p_vorname TEXT,
    p_nachname TEXT,
    p_email TEXT,
    p_passwort TEXT,
    p_telefonnummer TEXT,
    p_geburtsdatum DATE,
    p_svnr TEXT,
    p_allergien TEXT,
    p_vorerkrankungen TEXT,
    p_medikamente TEXT,
    p_a_behandelnderArzt INTEGER,
    FOREIGN KEY (p_a_behandelnderArzt) REFERENCES a_aerzte(a_id)
);

CREATE TABLE IF NOT EXISTS t_termine (
    t_id INTEGER PRIMARY KEY NOT NULL,
    t_datum DATE,
    t_uhrzeit TIME,
    t_p_id INTEGER,
    t_a_id INTEGER,
    t_tt_id INTEGER,
    t_z_id INTEGER,
    FOREIGN KEY (t_p_id) REFERENCES p_patienten(p_id),
    FOREIGN KEY (t_a_id) REFERENCES a_aerzte(a_id),
    FOREIGN KEY (t_tt_id) REFERENCES tt_termintyp(tt_id),
    FOREIGN KEY (t_z_id) REFERENCES z_zeitslots(z_id)
);

CREATE TABLE IF NOT EXISTS b_bewertungen (
    b_id INTEGER PRIMARY KEY NOT NULL,
    b_punkte INTEGER,
    b_kommentar TEXT,
    b_p_id INTEGER,
    b_a_id INTEGER,
    FOREIGN KEY (b_p_id) REFERENCES p_patienten(p_id),
    FOREIGN KEY (b_a_id) REFERENCES a_aerzte(a_id)
);

CREATE TABLE IF NOT EXISTS tt_termintyp (
    tt_id INTEGER PRIMARY KEY NOT NULL,
    tt_bezeichnung TEXT
);

CREATE TABLE IF NOT EXISTS m_medikamente (
    m_id INTEGER PRIMARY KEY NOT NULL,
    m_aktuell INTEGER NOT NULL,
    m_name TEXT
);

CREATE TABLE IF NOT EXISTS l_logging (
    l_id INTEGER PRIMARY KEY NOT NULL,
    l_event_typ TEXT,
    l_timestamp TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    l_p_id INTEGER,
    l_a_id INTEGER,
    FOREIGN KEY (l_p_id) REFERENCES p_patienten(p_id),
    FOREIGN KEY (l_a_id) REFERENCES a_aerzte(a_id)
);

CREATE TABLE IF NOT EXISTS z_zeitslots (
    z_id INTEGER PRIMARY KEY NOT NULL,
    z_startzeit TIME,
    z_endzeit TIME
);

CREATE TABLE IF NOT EXISTS u_userverwaltung (
    u_id INTEGER PRIMARY KEY NOT NULL,
    u_username TEXT,
    u_passwort TEXT,
    u_email TEXT,
    u_telefonnummer TEXT,
    u_rolle TEXT,
    u_p_id INTEGER,
    u_a_id INTEGER,
    FOREIGN KEY (u_p_id) REFERENCES p_patienten(p_id),
    FOREIGN KEY (u_a_id) REFERENCES a_aerzte(a_id)
);

CREATE TABLE IF NOT EXISTS pm_p_hat_m (
    pm_p_id INTEGER NOT NULL,
    pm_m_id INTEGER NOT NULL,
    PRIMARY KEY (pm_p_id, pm_m_id),
    FOREIGN KEY (pm_p_id) REFERENCES p_patienten(p_id),
    FOREIGN KEY (pm_m_id) REFERENCES m_medikamente(m_id)
);

-- Insert data
INSERT INTO a_aerzte (a_id, a_titel, a_vorname, a_nachname, a_email, a_telefonnummer, a_fachrichtung, a_plz, a_ort, a_berufserfahrung, a_qualifikationen)
VALUES
(1, 'Dr', 'Erwald', 'Heberer', 'erwald.heberer@example.com', '123456789', 'Allgemeinarzt', '1050', 'Wien', 10, 'PhD'),
(2, 'Dr', 'Marie', 'Effner', 'marie.effnerh@example.com', '987654321', 'Kardiologin', '1100', 'Wien', 15, NULL),
(3, 'Dr. med.', 'Michael', 'Jordan', 'michael.jordan@example.com', '555555555', 'Hautarzt', '1120', 'Wien', 12, NULL),
(4, 'Dr. med.', 'Julia', 'Schmidt', 'julia.schmidt@example.com', '111111111', 'Kinderärztin', '1010', 'Wien', 8, 'Dr. med.'),
(5, 'Dr. med.', 'Michael', 'Müller', 'michael.mueller@example.com', '222222222', 'Onkologe', '1020', 'Wien', 20, 'Dr. med.'),
(6, 'Dr. med.', 'Anna', 'Wagner', 'anna.wagner@example.com', '333333333', 'Psychiaterin', '1030', 'Wien', 15, 'Dr. med., Psychiatrie'),
(7, 'Dr', 'Christoph', 'Becker', 'christoph.becker@example.com', '444444444', 'Orthopäde', '1040', 'Wien', 18, NULL),
(8, 'Dr. med.', 'Laura', 'Hofmann', 'laura.hofmann@example.com', '481910519', 'Neurologin', '1050', 'Wien', 12, 'Dr. med., Neurologie');

INSERT INTO p_patienten (p_id, p_vorname, p_nachname, p_email, p_passwort, p_telefonnummer, p_geburtsdatum, p_svnr, p_allergien, p_vorerkrankungen, p_medikamente, p_a_behandelnderArzt)
VALUES
(1, 'Anna', 'Schmidt', 'anna.schmidt@example.com', 'pass123', '123456789', '1990-05-15', '1234567890', 'Pollen', 'Bluthochdruck', 'Aspirin', 1),
(2, 'Markus', 'Müller', 'markus.mueller@example.com', 'pass456', '0987654321', '1985-08-22', '0987654321', 'Penicillin', 'Diabetes', 'Insulin', 2),
(3, 'Julia', 'Becker', 'julia.becker@example.com', 'pass789', '1122334455', '1993-03-10', '1122334455', NULL, 'Asthma', 'Ventolin', 3),
(4, 'Max', 'Lehmann', 'max.lehmann@example.com', 'passabc', '5544332211', '1980-11-28', '5544332211', 'Erdnüsse', 'Herzkrankheit', 'Clopidogrel', 2),
(5, 'Sophie', 'Hoffmann', 'sophie.hoffmann@example.com', 'passxyz', '6677889900', '1995-07-03', '6677889900', 'Schalentiere', 'Arthritis', 'Ibuprofen', 1);

INSERT INTO b_bewertungen (b_id, b_punkte, b_kommentar, b_p_id, b_a_id)
VALUES
(1, 2, 'Nicht zufrieden mit der Behandlung!', 1, 1),
(2, 5, 'Kompetenter Arzt, empfehle ich weiter.', 3, 3),
(3, 3, 'Etwas längere Wartezeit, aber gute Beratung.', 2, 2),
(4, 4, 'Freundliches Personal und saubere Praxis.', 4, 2),
(5, 5, 'Schnelle Diagnose, bin sehr zufrieden.', 5, 1);

INSERT INTO l_logging (l_id, l_event_typ, l_p_id, l_a_id)
VALUES
(1, 'Anmeldung', 1, 1),
(2, 'Terminvereinbarung', 3, 3),
(3, 'Bewertung', 2, 2),
(4, 'Anmeldung', 4, 2),
(5, 'Terminvereinbarung', 5, 1);

INSERT INTO tt_termintyp (tt_id, tt_bezeichnung) VALUES
(1, 'Erstuntersuchung'),
(2, 'Folgeuntersuchung');

-- foreign key hinzufügen zu t_termine 
ALTER TABLE t_termine
ADD FOREIGN KEY (t_z_id) REFERENCES z_zeitslots(z_id)
ON DELETE NO ACTION
ON UPDATE NO ACTION;

ALTER TABLE t_termine
ADD FOREIGN KEY (t_tt_id) REFERENCES tt_termintyp(tt_id)
ON DELETE NO ACTION
ON UPDATE NO ACTION;

-- foreign key hinzufügen zu t_termine 
ALTER TABLE t_termine
ADD FOREIGN KEY (t_p_id) REFERENCES p_patienten(p_id)
ON DELETE NO ACTION
ON UPDATE NO ACTION;

ALTER TABLE t_termine
ADD FOREIGN KEY (t_a_id) REFERENCES a_aerzte(a_id)
ON DELETE NO ACTION
ON UPDATE NO ACTION;

-- foreign key hinzufügen zu u_userverwaltung 
ALTER TABLE b_bewertungen
ADD FOREIGN KEY (b_a_id) REFERENCES a_aerzte(a_id)
ON DELETE NO ACTION
ON UPDATE NO ACTION;

ALTER TABLE b_bewertungen
ADD FOREIGN KEY (b_p_id) REFERENCES p_patienten(p_id)
ON DELETE NO ACTION
ON UPDATE NO ACTION;

-- foreign key hinzufügen zu u_userverwaltung 
ALTER TABLE u_userverwaltung
ADD FOREIGN KEY (u_a_id) REFERENCES a_aerzte(a_id)
ON DELETE NO ACTION
ON UPDATE NO ACTION;

ALTER TABLE u_userverwaltung
ADD FOREIGN KEY (u_p_id) REFERENCES p_patienten(p_id)
ON DELETE NO ACTION
ON UPDATE NO ACTION;

-- foreign key hinzufügen zu l_logging 
ALTER TABLE l_logging
ADD FOREIGN KEY (l_a_id) REFERENCES a_aerzte(a_id)
ON DELETE NO ACTION
ON UPDATE NO ACTION;

ALTER TABLE l_logging
ADD FOREIGN KEY (l_p_id) REFERENCES p_patienten(p_id)
ON DELETE NO ACTION
ON UPDATE NO ACTION;
